bl_info = {
    "name": "Maya Blender Bridge",
    "author": "Edward Lim",
    "version": (1, 2),
    "blender": (3, 0, 0),
    "location": "View3D > Sidebar > Maya Tools",
    "description": "Runs a client that connects to Maya socket to query for mesh transfer.",
    "category": "Import-Export",
}

import bpy
import os
from datetime import datetime
import socket

HOST = '127.0.0.1'
PORT = 50008

addon_dir = os.path.dirname(__file__)
# fbx2maya_script_path = os.path.join(addon_dir, "fbx2maya.py")


# ------------------------------------------------------------------------
# Addon Preferences (for storing Maya paths)
# ------------------------------------------------------------------------
class MAYA_BRIDGE_ADDON_PREF(bpy.types.AddonPreferences):
    bl_idname = __name__

    temp_fbx_output_dir: bpy.props.StringProperty(
        name="Temp FBX output dir",
        description="Path to store temp fbx file",
        subtype='DIR_PATH',
        default=r"C:\Users\_\Desktop\mbb"
    )

    def draw(self, context):
        layout = self.layout
        layout.label(text="Maya Bridge Settings")
        #layout.prop(self, "mayapy_path")
        layout.prop(self, "temp_fbx_output_dir")
        #layout.prop(self, "temp_maya_output_dir")


# ------------------------------------------------------------------------
# Operator
# ------------------------------------------------------------------------
class BLENDER_TO_MAYA_PROC(bpy.types.Operator):
    bl_idname = "proc.blender_to_maya"
    bl_label = "Send selected meshes to Maya"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        prefs = bpy.context.preferences.addons[__name__].preferences
        scene = context.scene

        # Construct temp output file name.
        output_file_name = int(datetime.now().timestamp() * 1000)
        temp_fbx_output_file_path = os.path.join(prefs.temp_fbx_output_dir, f"{output_file_name}.fbx")

        # Maya uses centimeter. We should temporarily set our scene to use centimeter (0.01) for the export.
        scene.unit_settings.scale_length = 0.01

        # Get all selected objects.
        selected_objects = bpy.context.selected_objects
        if not selected_objects:
            print("No objects selected for export.")
            return

        # Export all selected objects as FBX.
        bpy.ops.export_scene.fbx(
            filepath=temp_fbx_output_file_path,
            use_selection=True,
            apply_unit_scale=True,
            global_scale=1.0,
            use_space_transform=True,
            object_types={'MESH'},
            bake_space_transform=False,
            mesh_smooth_type='OFF',
            use_custom_props=False,
            add_leaf_bones=False,
            path_mode='AUTO'
        )

        # Reset unit scale back to meter.
        scene.unit_settings.scale_length = 1.0

        try:
            # Try to send data to Maya. This is to tell Maya to import the FBX file that we 
            # have just exported.
            data = send_to_maya(f"IMPORT_FBX {temp_fbx_output_file_path}")

            # Log the response from Maya.
            self.report({'INFO'}, f"[MBB Client] Received: {data.decode('utf-8')}")

        except Exception as e:
            self.report({'ERROR'}, f"Process failed: {e}")
        return {'FINISHED'}


class MAYA_TO_BLENDER_PROC(bpy.types.Operator):
    bl_idname = "proc.maya_to_blender"
    bl_label = "Import selected Maya mesh to Blender"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        prefs = bpy.context.preferences.addons[__name__].preferences
        scene = context.scene

        # Construct temp output file name.
        output_file_name = int(datetime.now().timestamp() * 1000)
        temp_fbx_output_file_path = os.path.join(prefs.temp_fbx_output_dir, f"{output_file_name}.fbx")

        # Runs the process scripts.
        try:
            # Provide Maya with the file output path.
            # It is easier if one side of the communication decides this rather than
            # having both side to decide independently and having to sync it.
            data = send_to_maya(f"EXPORT_SELECTED {temp_fbx_output_file_path}")
            
            # Response from Maya.
            self.report({'INFO'}, f"[MBB Client] Received: {data.decode('utf-8')}")

            # Maya uses centimeter. We should temporarily set our scene to use centimeter (0.01) for the import.
            scene.unit_settings.scale_length = 0.01

            # Import the temp FBX file generated by Maya.
            filepath = temp_fbx_output_file_path.replace("\\", "/")
            bpy.ops.import_scene.fbx(filepath=filepath)

            # Reset unit scale back to meter.
            scene.unit_settings.scale_length = 1.0

            # Get imported objects (the importer auto-selects them).
            imported_objects = bpy.context.selected_objects

            # Reset scale to 1.0 for all imported objects. For some reason it auto scales to 100.
            for obj in imported_objects:
                obj.scale = (1.0, 1.0, 1.0)
                obj.select_set(True)

        except Exception as e:
            self.report({'ERROR'}, f"Process failed: {e}")
        return {'FINISHED'}


# ------------------------------------------------------------------------
# Creates a Panel in the N tool sidebar.
# ------------------------------------------------------------------------
class MAYA_BRIDGE_PANEL(bpy.types.Panel):
    bl_label = "Maya Bridge"
    bl_idname = "MAYA_BRIDGE_PANEL"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "Maya Bridge"

    def draw(self, context):
        layout = self.layout
        layout.operator("proc.blender_to_maya", text="SEND TO MAYA", icon='PLAY')
        layout.operator("proc.maya_to_blender", text="SEND HERE", icon='PLAY')


# ------------------------------------------------------------------------
# Registration
# ------------------------------------------------------------------------
classes = (
    MAYA_BRIDGE_ADDON_PREF,
    BLENDER_TO_MAYA_PROC,
    MAYA_TO_BLENDER_PROC,
    MAYA_BRIDGE_PANEL,
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

def unregister():
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)

def send_to_maya(message):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((HOST, PORT))
        s.sendall(message.encode('utf-8'))
        data = s.recv(4000)
        return data

if __name__ == "__main__":
    register()